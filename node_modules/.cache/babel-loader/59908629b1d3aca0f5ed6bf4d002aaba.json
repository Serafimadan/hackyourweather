{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/serafima/WWW/React/week3/project/src/components/CityInfoList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport SearchForm from './SearchingForm';\nimport CityWeatherInformation from './CityWeatherInformation';\n\nconst CityInfoList = () => {\n  _s();\n\n  let [city, setCity] = useState('');\n  let [weatherInfo, setWeatherInfo] = useState([]);\n  let [error, setError] = useState(false);\n  let [loading, setLoading] = useState(false);\n  const API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n\n  function getWeatherInfo(e) {\n    e.preventDefault(); // clear state in preparation for new data\n\n    setError(false);\n    setWeatherInfo([]);\n    setLoading(true);\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`).then(response => response.json()).then(response => {\n      if (response.cod !== 200) {\n        throw new Error();\n      }\n\n      setWeatherInfo([...weatherInfo, response]);\n      setLoading(false);\n    }).catch(error => {\n      setError(true);\n      setLoading(false);\n      console.log(error.message);\n    });\n  }\n\n  const deleteCard = id => {\n    console.log(id); // setWeatherInfo(weatherInfo.filter((cityForecast, index) => index !== id ));\n\n    const newCityWeathers = weatherInfo.filter((cityWeather, index) => {\n      if (index !== key) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    setWeatherInfo(newCityWeathers);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      getWeatherInfo: getWeatherInfo,\n      setCity: setCity,\n      city: city\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-list\",\n      children: weatherInfo.length === 0 ? \"Write a city to get weather forcast!\" : !error && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: weatherInfo.map((cityForcast, id) => /*#__PURE__*/_jsxDEV(CityWeatherInformation, {\n          weatherInfo: cityForcast,\n          error: error,\n          loading: loading,\n          id: id,\n          deleteCard: deleteCard\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CityInfoList, \"IblBMfCneL3VC3JTmdSnyp0QBkA=\");\n\n_c = CityInfoList;\nexport default CityInfoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityInfoList\");","map":{"version":3,"sources":["/Users/serafima/WWW/React/week3/project/src/components/CityInfoList.js"],"names":["React","useState","SearchForm","CityWeatherInformation","CityInfoList","city","setCity","weatherInfo","setWeatherInfo","error","setError","loading","setLoading","API_KEY","process","env","REACT_APP_OPENWEATHERMAP_API_KEY","getWeatherInfo","e","preventDefault","fetch","then","response","json","cod","Error","catch","console","log","message","deleteCard","id","newCityWeathers","filter","cityWeather","index","key","length","map","cityForcast"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport SearchForm from './SearchingForm';\nimport CityWeatherInformation from './CityWeatherInformation';\n\nconst CityInfoList = () => {\n    let [city, setCity] = useState('');\n    let [weatherInfo, setWeatherInfo] = useState([]);\n    let [error, setError] = useState(false);\n    let [loading, setLoading] = useState(false);\n    \n    const API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n    \n    function getWeatherInfo(e) {\n        e.preventDefault();\n        // clear state in preparation for new data\n        setError(false);\n        setWeatherInfo([]);\n        setLoading(true);\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`)\n        .then(response => response.json())\n        .then(response => {\n            if (response.cod !== 200) {\n                throw new Error()\n            }\n            setWeatherInfo([...weatherInfo, response]);\n            setLoading(false);\n        })\n        .catch(error => {\n            setError(true);\n            setLoading(false);\n            console.log(error.message);\n        });\n    }\n\n    const deleteCard = (id) => {\n        console.log(id)\n        // setWeatherInfo(weatherInfo.filter((cityForecast, index) => index !== id ));\n        const newCityWeathers = weatherInfo.filter((cityWeather, index) => {\n            if (index !== key) {\n                return true\n            } else {\n                return false\n            }\n        })\n\n        setWeatherInfo(newCityWeathers)\n    }\n    return (\n        <div className = 'container'>\n            <h1>Weather</h1>\n            <SearchForm getWeatherInfo = {getWeatherInfo} setCity = {setCity} city={city}/>\n            <div className = 'weather-list'>\n            {weatherInfo.length === 0 ? \n                \"Write a city to get weather forcast!\" : \n                !error && <div>{weatherInfo.map((cityForcast, id) => \n                    <CityWeatherInformation key = {id} \n                        weatherInfo={cityForcast}\n                        error={error}\n                        loading={loading}\n                        id={id}\n                        deleteCard={deleteCard}    \n                        />)}</div>\n            }\n            </div>\n        </div>\n    )\n}\nexport default CityInfoList;\n    "]},"metadata":{},"sourceType":"module"}