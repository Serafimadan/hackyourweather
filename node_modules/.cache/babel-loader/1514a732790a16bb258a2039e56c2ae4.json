{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/serafima/WWW/project/src/components/CityForcast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Button } from '@material-ui/core';\nimport Chart from './Chart';\nconst API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY; // to get parameters for routes in a component we need to refer to the match.params\n\nconst CityForcast = ({\n  match\n}) => {\n  _s();\n\n  const [forecast, setForecast] = useState({});\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  function converterTemperature(valNum) {\n    let Celsius = valNum - 273.15;\n    return Math.round(Celsius);\n  }\n\n  useEffect(() => {\n    const fetchWeatherForcast = () => {\n      setError(false);\n      fetch(`https://api.openweathermap.org/data/2.5/forecast?id=${match.params.cityId}&appid=${API_KEY}`).then(response => response.json()).then(response => {\n        // ????? works 'cod' as string not a number\n        if (response.cod !== '200') {\n          throw new Error();\n        } else {\n          console.log(response);\n          const dataWeather = {\n            name: response.city.name,\n            country: response.city.country,\n            list: response.list.map(item => ({\n              dateTime: item.dt_txt,\n              temp: converterTemperature(item.main.temp)\n            }))\n          };\n          setForecast(dataWeather);\n        }\n      }).catch(error => {\n        setLoading(false);\n        setError(true);\n        console.log(error.message);\n      });\n    };\n\n    fetchWeatherForcast();\n  }, [match.params.cityId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-forcast\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid city!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      loading: loading,\n      forecast: forecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"Go back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CityForcast, \"ZP++0OpAwU9MwoGrbhYFPeb22GU=\");\n\n_c = CityForcast;\nexport default CityForcast;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityForcast\");","map":{"version":3,"sources":["/Users/serafima/WWW/project/src/components/CityForcast.js"],"names":["React","useState","useEffect","Link","Button","Chart","API_KEY","process","env","REACT_APP_OPENWEATHERMAP_API_KEY","CityForcast","match","forecast","setForecast","error","setError","loading","setLoading","converterTemperature","valNum","Celsius","Math","round","fetchWeatherForcast","fetch","params","cityId","then","response","json","cod","Error","console","log","dataWeather","name","city","country","list","map","item","dateTime","dt_txt","temp","main","catch","message"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AAEA,OAAOC,KAAP,MAAkB,SAAlB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,gCAA5B,C,CAEA;;AACA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAAA;;AAC7B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,KAAD,CAAtC;;AACA,WAASiB,oBAAT,CAA8BC,MAA9B,EAAsC;AAClC,QAAIC,OAAO,GAAGD,MAAM,GAAE,MAAtB;AACA,WAAOE,IAAI,CAACC,KAAL,CAAWF,OAAX,CAAP;AACH;;AAEDlB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMqB,mBAAmB,GAAG,MAAM;AAC9BR,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACAS,MAAAA,KAAK,CAAE,uDAAsDb,KAAK,CAACc,MAAN,CAAaC,MAAO,UAASpB,OAAQ,EAA7F,CAAL,CACCqB,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMC,QAAQ,IAAI;AACd;AACA,YAAIA,QAAQ,CAACE,GAAT,KAAiB,KAArB,EAA4B;AACxB,gBAAM,IAAIC,KAAJ,EAAN;AACH,SAFD,MAEO;AACHC,UAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACA,gBAAMM,WAAW,GAAG;AAChBC,YAAAA,IAAI,EAAEP,QAAQ,CAACQ,IAAT,CAAcD,IADJ;AAEhBE,YAAAA,OAAO,EAAET,QAAQ,CAACQ,IAAT,CAAcC,OAFP;AAGhBC,YAAAA,IAAI,EAAEV,QAAQ,CAACU,IAAT,CAAcC,GAAd,CAAkBC,IAAI,KAAK;AACjCC,cAAAA,QAAQ,EAAED,IAAI,CAACE,MADkB;AAEjCC,cAAAA,IAAI,EAAEzB,oBAAoB,CAACsB,IAAI,CAACI,IAAL,CAAUD,IAAX;AAFO,aAAL,CAAtB;AAHU,WAApB;AAQA9B,UAAAA,WAAW,CAACqB,WAAD,CAAX;AACH;AACJ,OAlBD,EAmBCW,KAnBD,CAmBO/B,KAAK,IAAI;AACZG,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAiB,QAAAA,OAAO,CAACC,GAAR,CAAYnB,KAAK,CAACgC,OAAlB;AACH,OAvBD;AAwBH,KA1BD;;AA2BAvB,IAAAA,mBAAmB;AACtB,GA7BQ,EA6BN,CAACZ,KAAK,CAACc,MAAN,CAAaC,MAAd,CA7BM,CAAT;AA+BA,sBACI;AAAK,IAAA,SAAS,EAAG,mBAAjB;AAAA,4BACI;AAAA,gBAAMZ,KAAK,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAf;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAEE,OAAhB;AAAyB,MAAA,QAAQ,EAAEJ;AAAnC;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,IAAD;AAAO,MAAA,EAAE,EAAC,GAAV;AAAA,6BACI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,KAAK,EAAC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAjDD;;GAAMF,W;;KAAAA,W;AAmDN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Button } from '@material-ui/core';\n\nimport Chart from './Chart';\nconst API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n\n// to get parameters for routes in a component we need to refer to the match.params\nconst CityForcast = ({match}) => {\n    const [forecast, setForecast] = useState({});\n    const [error, setError] = useState(false);\n    const [loading, setLoading] = useState(false);\n    function converterTemperature(valNum) {\n        let Celsius = valNum -273.15;\n        return Math.round(Celsius);\n    }\n\n    useEffect(() => {\n        const fetchWeatherForcast = () => {\n            setError(false);\n            fetch(`https://api.openweathermap.org/data/2.5/forecast?id=${match.params.cityId}&appid=${API_KEY}`)\n            .then(response => response.json())\n            .then(response => { \n                // ????? works 'cod' as string not a number\n                if (response.cod !== '200') {\n                    throw new Error();\n                } else {\n                    console.log(response)\n                    const dataWeather = {\n                        name: response.city.name,\n                        country: response.city.country,\n                        list: response.list.map(item => ({\n                        dateTime: item.dt_txt,\n                        temp: converterTemperature(item.main.temp),\n                        })),\n                    };\n                    setForecast(dataWeather);\n                }\n            }) \n            .catch(error => {\n                setLoading(false);\n                setError(true);\n                console.log(error.message);\n            });\n        }\n        fetchWeatherForcast();\n    }, [match.params.cityId]);\n\n    return (\n        <div className = 'container-forcast'>\n            <div>{error && <p >Please enter a valid city!</p>}</div>\n            <Chart loading={loading} forecast={forecast}/>\n            <Link  to=\"/\">\n                <Button variant=\"contained\" color=\"primary\">Go back</Button>\n            </Link>\n        </div>\n    )\n}\n\nexport default CityForcast;"]},"metadata":{},"sourceType":"module"}