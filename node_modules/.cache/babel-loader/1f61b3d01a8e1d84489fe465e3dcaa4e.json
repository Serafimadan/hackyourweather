{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/serafima/WWW/React/week3/project/src/components/CityInfoList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport SearchForm from './SearchingForm';\nimport CityWeatherInformation from './CityWeatherInformation';\n\nconst CityInfoList = () => {\n  _s();\n\n  let [weatherInfo, setWeatherInfo] = useState([]);\n  k;\n  let [error, setError] = useState(false);\n  let [loading, setLoading] = useState(false);\n  const API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n\n  function getWeatherInfo(inputValue) {\n    // clear state in preparation for new data\n    if (inputValue <= 1) return setError(\"Please Enter the name of city.\");\n    setError(false);\n    setLoading(true);\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${inputValue}&appid=${API_KEY}`).then(response => response.json()).then(data => {\n      if (data.cod !== 200) {\n        throw new Error();\n      }\n\n      setWeatherInfo([...weatherInfo, data]);\n      setLoading(false);\n    }).catch(error => {\n      setError(true);\n      setLoading(false);\n      console.log(error.message);\n    });\n  }\n\n  function removeCity(key) {\n    const newCityWeathers = weatherInfo.filter((weatherCity, index) => {\n      if (index !== key) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    setWeatherInfo(newCityWeathers);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      getWeatherInfo: getWeatherInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-list\",\n      children: Object.keys(weatherInfo).length > 0 && weatherInfo.map((city, index) => /*#__PURE__*/_jsxDEV(CityWeatherInformation, {\n        index: index,\n        city: city,\n        error: error,\n        loading: loading,\n        removeCity: removeCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CityInfoList, \"tH92sYce49prWHzhe1d37fMRFA8=\");\n\n_c = CityInfoList;\nexport default CityInfoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityInfoList\");","map":{"version":3,"sources":["/Users/serafima/WWW/React/week3/project/src/components/CityInfoList.js"],"names":["React","useState","SearchForm","CityWeatherInformation","CityInfoList","weatherInfo","setWeatherInfo","k","error","setError","loading","setLoading","API_KEY","process","env","REACT_APP_OPENWEATHERMAP_API_KEY","getWeatherInfo","inputValue","fetch","then","response","json","data","cod","Error","catch","console","log","message","removeCity","key","newCityWeathers","filter","weatherCity","index","Object","keys","length","map","city"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACvB,MAAI,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA5C;AAAiDM,EAAAA,CAAC;AAClD,MAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,KAAD,CAAhC;AACA,MAAI,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAApC;AAEA,QAAMW,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,gCAA5B;;AAEA,WAASC,cAAT,CAAwBC,UAAxB,EAAoC;AAChC;AACA,QAAIA,UAAU,IAAI,CAAlB,EAAsB,OAAQR,QAAQ,CAAC,gCAAD,CAAhB;AACtBA,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAE,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAO,IAAAA,KAAK,CAAE,qDAAoDD,UAAW,UAASL,OAAQ,EAAlF,CAAL,CACCO,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAI;AACV,UAAIA,IAAI,CAACC,GAAL,KAAa,GAAjB,EAAsB;AAClB,cAAM,IAAIC,KAAJ,EAAN;AACH;;AACDlB,MAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiBiB,IAAjB,CAAD,CAAd;AACAX,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KARD,EASCc,KATD,CASOjB,KAAK,IAAI;AACZC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAYnB,KAAK,CAACoB,OAAlB;AACH,KAbD;AAcH;;AAEG,WAASC,UAAT,CAAoBC,GAApB,EAAyB;AACrB,UAAMC,eAAe,GAAG1B,WAAW,CAAC2B,MAAZ,CAAmB,CAACC,WAAD,EAAcC,KAAd,KAAwB;AAC/D,UAAIA,KAAK,KAAKJ,GAAd,EAAmB;AACf,eAAO,IAAP;AACH,OAFD,MAEO;AACH,eAAO,KAAP;AACH;AACJ,KANuB,CAAxB;AAQAxB,IAAAA,cAAc,CAACyB,eAAD,CAAd;AACH;;AACL,sBACI;AAAK,IAAA,SAAS,EAAG,WAAjB;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,UAAD;AAAY,MAAA,cAAc,EAAIf;AAA9B;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,SAAS,EAAG,cAAjB;AAAA,gBACCmB,MAAM,CAACC,IAAP,CAAY/B,WAAZ,EAAyBgC,MAAzB,GAAkC,CAAlC,IAAuChC,WAAW,CAACiC,GAAZ,CAAgB,CAACC,IAAD,EAAOL,KAAP,kBACpD,QAAC,sBAAD;AACI,QAAA,KAAK,EAAEA,KADX;AAEI,QAAA,IAAI,EAAEK,IAFV;AAGI,QAAA,KAAK,EAAI/B,KAHb;AAII,QAAA,OAAO,EAAEE,OAJb;AAKI,QAAA,UAAU,EAAEmB;AALhB;AAAA;AAAA;AAAA;AAAA,cADoC;AADxC;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAvDD;;GAAMzB,Y;;KAAAA,Y;AAwDN,eAAeA,YAAf","sourcesContent":["import React, { useState } from 'react';\nimport SearchForm from './SearchingForm';\nimport CityWeatherInformation from './CityWeatherInformation';\n\nconst CityInfoList = () => {\n    let [weatherInfo, setWeatherInfo] = useState([]);k\n    let [error, setError] = useState(false);\n    let [loading, setLoading] = useState(false);\n    \n    const API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n    \n    function getWeatherInfo(inputValue) {\n        // clear state in preparation for new data\n        if (inputValue <= 1)  return  setError(\"Please Enter the name of city.\")\n        setError(false);\n        setLoading(true);\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${inputValue}&appid=${API_KEY}`)\n        .then(response => response.json())\n        .then(data => {\n            if (data.cod !== 200) {\n                throw new Error()\n            }\n            setWeatherInfo([...weatherInfo, data])\n            setLoading(false);\n        })\n        .catch(error => {\n            setError(true);\n            setLoading(false);\n            console.log(error.message);\n        });\n    }\n\n        function removeCity(key) {\n            const newCityWeathers = weatherInfo.filter((weatherCity, index) => {\n                if (index !== key) {\n                    return true\n                } else {\n                    return false\n                }\n            })\n    \n            setWeatherInfo(newCityWeathers)\n        }\n    return (\n        <div className = 'container'>\n            <h1>Weather</h1>\n            <SearchForm getWeatherInfo = {getWeatherInfo}/>\n            <div className = 'weather-list'>\n            {Object.keys(weatherInfo).length > 0 && weatherInfo.map((city, index) => (\n                <CityWeatherInformation \n                    index={index} \n                    city={city} \n                    error = {error}\n                    loading={loading} \n                    removeCity={removeCity} />\n                ))}\n            </div>\n        </div>\n    )\n}\nexport default CityInfoList;\n    "]},"metadata":{},"sourceType":"module"}