{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/serafima/WWW/React/week3/project/src/components/CityWeatherInformation.js\";\nimport React from 'react';\n\nconst CityWeatherInformation = ({\n  props,\n  idCity,\n  error,\n  loading,\n  removeCity\n}) => {\n  const {\n    name,\n    sys,\n    weather,\n    main,\n    coord,\n    id\n  } = props;\n  props.id += idCity;\n\n  function converterTemperature(valNum) {\n    let Celsius = valNum - 273.15;\n    return Math.round(Celsius);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"There is no such city in the world! Please enter a valid city.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 23\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loadoing...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 25\n    }, this), props.weatherInfo.cod === 200 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"city-element\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"information-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [name, \", \", sys.country]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-inform\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"weather-name\",\n            children: weather[0].main\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"weather-descript\",\n            children: weather[0].description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"min temp: \", converterTemperature(main.temp_min)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"max temp: \", converterTemperature(main.temp_max)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Location: \", props.weatherInfo.coord.lat, \", \", props.weatherInfo.coord.lon]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => removeCity(props.id),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n};\n\n_c = CityWeatherInformation;\nexport default CityWeatherInformation;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityWeatherInformation\");","map":{"version":3,"sources":["/Users/serafima/WWW/React/week3/project/src/components/CityWeatherInformation.js"],"names":["React","CityWeatherInformation","props","idCity","error","loading","removeCity","name","sys","weather","main","coord","id","converterTemperature","valNum","Celsius","Math","round","weatherInfo","cod","country","description","temp_min","temp_max","lat","lon"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,sBAAsB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,MAAT;AAAiBC,EAAAA,KAAjB;AAAwBC,EAAAA,OAAxB;AAAiCC,EAAAA;AAAjC,CAAD,KAAmD;AAC9E,QAAM;AAACC,IAAAA,IAAD;AAAMC,IAAAA,GAAN;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA,IAApB;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA;AAAjC,MAAuCV,KAA7C;AACDA,EAAAA,KAAK,CAACU,EAAN,IAAYT,MAAZ;;AACC,WAASU,oBAAT,CAA8BC,MAA9B,EAAsC;AAClC,QAAIC,OAAO,GAAGD,MAAM,GAAE,MAAtB;AACA,WAAOE,IAAI,CAACC,KAAL,CAAWF,OAAX,CAAP;AACH;;AACD,sBACI;AAAA,eACKX,KAAK,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADd,EAEKC,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFhB,EAGKH,KAAK,CAACgB,WAAN,CAAkBC,GAAlB,KAA0B,GAA1B,gBACG;AAAK,MAAA,SAAS,EAAG,cAAjB;AAAA,8BACI;AAAK,QAAA,SAAS,EAAG,uBAAjB;AAAA,gCACI;AAAA,qBAAKZ,IAAL,QAAaC,GAAG,CAACY,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAG,gBAAjB;AAAA,kCACI;AAAG,YAAA,SAAS,EAAG,cAAf;AAAA,sBAA+BX,OAAO,CAAC,CAAD,CAAP,CAAWC;AAA1C;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAG,YAAA,SAAS,EAAG,kBAAf;AAAA,sBAAmCD,OAAO,CAAC,CAAD,CAAP,CAAWY;AAA9C;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAMI;AAAA,mCAAcR,oBAAoB,CAACH,IAAI,CAACY,QAAN,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,eAOI;AAAA,mCAAcT,oBAAoB,CAACH,IAAI,CAACa,QAAN,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPJ,eAQI;AAAA,mCAAcrB,KAAK,CAACgB,WAAN,CAAkBP,KAAlB,CAAwBa,GAAtC,QAA6CtB,KAAK,CAACgB,WAAN,CAAkBP,KAAlB,CAAwBc,GAArE;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAWI;AAAQ,QAAA,OAAO,EAAE,MAAMnB,UAAU,CAACJ,KAAK,CAACU,EAAP,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,GAcC,IAjBN;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CA5BD;;KAAMX,sB;AA8BN,eAAeA,sBAAf","sourcesContent":["import React from 'react';\n\nconst CityWeatherInformation = ({ props, idCity, error, loading, removeCity }) => {\n    const {name,sys, weather, main, coord, id} = props;\n   props.id += idCity;\n    function converterTemperature(valNum) {\n        let Celsius = valNum -273.15;\n        return Math.round(Celsius);\n    }\n    return (\n        <div >\n            {error && <p >There is no such city in the world! Please enter a valid city.</p>}\n            {loading && <div>Loadoing...</div>}\n            {props.weatherInfo.cod === 200 ?           \n                <div className = 'city-element'> \n                    <div className = 'information-container'>\n                        <h2>{name}, {sys.country}</h2>\n                        <div className = 'weather-inform'> \n                            <p className = 'weather-name'>{weather[0].main}</p>\n                            <p className = 'weather-descript'>{weather[0].description}</p>\n                        </div>\n                        <p>min temp: {converterTemperature(main.temp_min)}</p>\n                        <p>max temp: {converterTemperature(main.temp_max)}</p>\n                        <p>Location: {props.weatherInfo.coord.lat}, {props.weatherInfo.coord.lon}</p>\n                    </div>\n                    <button onClick={() => removeCity(props.id)}>X</button>\n                </div>\n            : null}\n        </div>\n    )\n}\n    \nexport default CityWeatherInformation;"]},"metadata":{},"sourceType":"module"}