{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/serafima/WWW/React/week3/project/src/components/CityInfoList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport SearchForm from './SearchingForm';\nimport CityWeatherInformation from './CityWeatherInformation';\n\nconst CityInfoList = () => {\n  _s();\n\n  let [city, setCity] = useState('');\n  let [weatherInfo, setWeatherInfo] = useState({});\n  let [error, setError] = useState(false);\n  let [loading, setLoading] = useState(false);\n  const API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n\n  function getWeatherInfo(e) {\n    e.preventDefault();\n\n    if (city.length === 0) {\n      return setError(true);\n    } // clear state in preparation for new data\n\n\n    setError(false);\n    setWeatherInfo({});\n    setLoading(true);\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`).then(response => response.json()).then(data => {\n      if (data.cod !== 200) {\n        throw new Error();\n      }\n\n      setWeatherInfo(data);\n      setLoading(false);\n    }).catch(error => {\n      setError(true);\n      setLoading(false);\n      console.log(error.message);\n    });\n  }\n\n  const weatherArray = cityWeather.map((item, i) => {\n    // Kelvin to Celsius\n    function converterTemperature(valNum) {\n      let Celsius = valNum - 273.15;\n      return Math.round(Celsius);\n    }\n\n    return /*#__PURE__*/_jsxDEV(CityWeatherInformation, {\n      cityName: item.name,\n      countryName: item.sys.country,\n      weatherType: item.weather.map(weatherName => {\n        return weatherName.main;\n      }),\n      weatherDescription: item.weather.map(weatherDescrip => {\n        return weatherDescrip.description;\n      }),\n      tempMin: converterTemperature(item.main.temp_min),\n      tempMax: converterTemperature(item.main.temp_max),\n      locationLat: item.coord.lat,\n      locationLon: item.coord.lon\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchForm, {\n      getWeatherInfo: getWeatherInfo,\n      setCity: setCity,\n      city: city\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-list\",\n      children: /*#__PURE__*/_jsxDEV(CityWeatherInformation, {\n        weatherInfo: weatherInfo,\n        error: error,\n        loading: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CityInfoList, \"dxLTSyCSOom2yd9HPjcWqD0EOrg=\");\n\n_c = CityInfoList;\nexport default CityInfoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityInfoList\");","map":{"version":3,"sources":["/Users/serafima/WWW/React/week3/project/src/components/CityInfoList.js"],"names":["React","useState","SearchForm","CityWeatherInformation","CityInfoList","city","setCity","weatherInfo","setWeatherInfo","error","setError","loading","setLoading","API_KEY","process","env","REACT_APP_OPENWEATHERMAP_API_KEY","getWeatherInfo","e","preventDefault","length","fetch","then","response","json","data","cod","Error","catch","console","log","message","weatherArray","cityWeather","map","item","i","converterTemperature","valNum","Celsius","Math","round","name","sys","country","weather","weatherName","main","weatherDescrip","description","temp_min","temp_max","coord","lat","lon"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport SearchForm from './SearchingForm';\nimport CityWeatherInformation from './CityWeatherInformation';\n\nconst CityInfoList = () => {\n    let [city, setCity] = useState('');\n    let [weatherInfo, setWeatherInfo] = useState({});\n    let [error, setError] = useState(false);\n    let [loading, setLoading] = useState(false);\n    \n    const API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n    \n    function getWeatherInfo(e) {\n        e.preventDefault();\n        if (city.length === 0) {\n            return setError(true);\n        }\n        // clear state in preparation for new data\n        setError(false);\n        setWeatherInfo({});\n        setLoading(true);\n        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`)\n        .then(response => response.json())\n        .then(data => {\n            if (data.cod !== 200) {\n                throw new Error()\n            }\n            setWeatherInfo(data);\n            setLoading(false);\n        })\n        .catch(error => {\n            setError(true);\n            setLoading(false);\n            console.log(error.message);\n        });\n    }\n    const weatherArray = cityWeather.map((item, i) => {\n        // Kelvin to Celsius\n        function converterTemperature(valNum) {\n            let Celsius = valNum -273.15;\n            return Math.round(Celsius);\n        }\n        return (\n            <CityWeatherInformation  \n                key = {i} \n                cityName = {item.name} \n                countryName = {item.sys.country} \n                weatherType = {item.weather.map((weatherName) => { \n                    return (weatherName.main)\n                })} \n                weatherDescription = {item.weather.map((weatherDescrip) => { \n                    return (weatherDescrip.description)\n                }) } \n                tempMin = {converterTemperature(item.main.temp_min)} \n                tempMax = {converterTemperature(item.main.temp_max)} \n                locationLat = {item.coord.lat} \n                locationLon = {item.coord.lon}/>\n        )\n    })\n    return (\n        <div className = 'container'>\n            <h1>Weather</h1>\n            <SearchForm getWeatherInfo = {getWeatherInfo} setCity = {setCity} city={city}/>\n            <div className = 'weather-list'>\n            {/* {weatherInfo.length === 0 ? \n                \"Get your first dog by clicking the button!\" : \n                !error && <div>{weatherInfo.map(dog => <CityWeatherInformation weatherInfo={weatherInfo} error={error}\n                    loading={loading} key = {dog.i}/>)}</div>\n            } */}\n                <CityWeatherInformation \n                    weatherInfo={weatherInfo}\n                    error={error}\n                    loading={loading}\n                />\n            </div>\n        </div>\n    )\n}\nexport default CityInfoList;\n    "]},"metadata":{},"sourceType":"module"}